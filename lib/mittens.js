// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Mittens, fs, prov,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  Base = require('./base').Base;

  prov = require('./provider');

  Mittens = (function(_super) {
    __extends(Mittens, _super);

    function Mittens(options) {
      this.options = options != null ? options : {};
      this.storeProvider = __bind(this.storeProvider, this);
      if (this.name == null) {
        this.name = 'Mittens';
      }
      if (this.ver == null) {
        this.ver = this.getVersion();
      }
      this.config = [];
      this.providers = {};
      this.on('log', function() {
        var x, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          x = arguments[_i];
          _results.push(console.log(x));
        }
        return _results;
      });
      this.init();
      return this;
    }

    Mittens.prototype.init = function() {
      this.readConfig();
      return this.on('stage', function() {
        return this.createProviderObj();
      });
    };

    Mittens.prototype.findAliases = function() {
      var aliases, provider, _i, _len, _ref;
      aliases = {};
      _ref = this.config;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        provider = _ref[_i];
        aliases[provider.alias] = '';
      }
      return aliases;
    };

    Mittens.prototype.findAlias = function(alias) {
      var provider, _i, _len, _ref, _results;
      _ref = this.config;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        provider = _ref[_i];
        if (provider.alias === alias) {
          _results.push("Alias " + alias + " corresponds to " + provider.name);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Mittens.prototype.sortProviders = function() {
      var provider, types, _i, _len, _ref;
      types = this.findAliases();
      _ref = this.config;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        provider = _ref[_i];
        if (provider.active) {
          types[provider.alias] = provider;
        }
      }
      return types;
    };

    Mittens.prototype.createProviderObj = function() {
      var providers, temp;
      console.log('Create Provider Objects');
      temp = {};
      providers = this.sortProviders();
      if (providers.tv) {
        temp.tv = new prov.SickBeard(providers.tv);
      }
      if (providers.movie) {
        temp.movie = new prov.CouchPotato(providers.movie);
      }
      return this.emit('ready', temp);
    };

    Mittens.prototype.returnProvider = function(id) {
      var provider, _i, _len, _ref;
      _ref = this.config;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        provider = _ref[_i];
        if (provider.id === parseInt(id)) {
          return provider;
        }
      }
    };

    Mittens.prototype.returnProviders = function() {
      return this.config;
    };

    Mittens.prototype.delProvider = function(id) {
      var num, provider, temp, _i, _len, _ref;
      num = '';
      temp = '';
      _ref = this.config;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        provider = _ref[_i];
        if (provider.id === parseInt(id)) {
          num = _i;
          temp = provider;
        }
      }
      this.config.splice(num, 1);
      this.writeConfig();
      return {
        success: true,
        message: "Removed Provider",
        provider: temp
      };
    };

    Mittens.prototype.verifyProvider = function(obj, fn) {
      var _temp, _this;
      console.log('testing');
      _this = this;
      if (obj.name === 'CouchPotato') {
        _temp = new prov.CouchPotato(obj);
        return _temp.test(fn);
      }
    };

    Mittens.prototype.verifyAndAdd = function(obj, fn) {
      var _temp, _this;
      console.log('VerifyAndAdd');
      _this = this;
      if (obj.name === 'CouchPotato') {
        _temp = new prov.CouchPotato(obj);
        return _temp.test(function(_data) {
          if (_data.success) {
            _this.storeProvider(obj);
            return _this.emit('message', {
              'success': true,
              'message': 'Adding Provider'
            });
          } else {
            return _this.emit('message', _data);
          }
        });
      }
    };

    Mittens.prototype.addProvider = function(obj) {
      return this.verifyAndAdd(obj, this.storeProvider);
    };

    Mittens.prototype.storeProvider = function(obj) {
      var item, temp, _i, _len, _ref;
      console.log('store provider');
      temp = new prov.generic(obj);
      temp.id = 0;
      delete temp._events;
      _ref = this.config;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.id >= temp.id) {
          temp.id = item.id + 1;
        }
      }
      console.log(temp);
      this.config.push(temp);
      this.writeConfig();
      return this.config;
    };

    Mittens.prototype.readConfig = function() {
      var _ref;
      _ref = this;
      return fs.readFile("" + __dirname + "/../config.json", function(err, data) {
        var error;
        if (err) {
          console.log('Unable to read settings.json: Imma make it.');
          return _ref.writeConfig();
        } else {
          try {
            _ref.config = JSON.parse(data);
            return _ref.emit('stage', 'Loaded Config');
          } catch (_error) {
            error = _error;
            return _ref.emit('log', 'Error in settings file: \n#{error}');
          }
        }
      });
    };

    Mittens.prototype.writeConfig = function() {
      var _ref;
      _ref = this.config;
      return fs.writeFile("" + __dirname + "/../config.json", JSON.stringify(this.config), function(err) {
        if (err) {
          return _ref.emit('log', 'I cannot write to the file');
        }
      });
    };

    Mittens.prototype.getVersion = function() {
      var data;
      data = JSON.parse(fs.readFileSync("" + __dirname + "/../package.json", 'utf8'));
      return {
        'app': data.version,
        'api': data.api
      };
    };

    return Mittens;

  })(Base);

  module.exports = Mittens;

}).call(this);
