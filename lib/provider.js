// Generated by CoffeeScript 1.6.3
(function() {
  var Base, CouchPotato, Provider, SickBeard, http, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./base').Base;

  http = require('http');

  Provider = (function(_super) {
    __extends(Provider, _super);

    function Provider(obj) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (obj == null) {
        obj = {};
      }
      this.name = (_ref = obj.name) != null ? _ref : 'None';
      this.host = (_ref1 = obj.host) != null ? _ref1 : '127.0.0.1';
      this.port = (_ref2 = obj.port) != null ? _ref2 : '8080';
      this.api = (_ref3 = obj.api) != null ? _ref3 : 'I<3U';
      this.active = (_ref4 = obj.active) != null ? _ref4 : true;
      this.alias = (_ref5 = obj.alias) != null ? _ref5 : 'none';
      this.on('log', function() {
        var x, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          x = arguments[_i];
          _results.push(console.log('LOG: ' + x));
        }
        return _results;
      });
      this.on('err', function() {
        var x, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          x = arguments[_i];
          _results.push(console.log('ERR: ' + x));
        }
        return _results;
      });
      this.on('status', function() {
        var x, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          x = arguments[_i];
          _results.push(console.log('STA: ' + x));
        }
        return _results;
      });
    }

    Provider.prototype.send = function(req, res, q) {
      var fn, query, timeout, timeout_wrapper, _request, _response, _this;
      query = this.buildReturn(q.type, q.term);
      _response = '';
      _this = this;
      timeout_wrapper = function(Request) {
        return function() {
          return _this.emit('err', 'Page Timed out');
        };
      };
      _request = http.request(query, function(resp) {
        var bit, str;
        str = '';
        bit = 0;
        resp.on('data', function(chunk) {
          bit++;
          return str += chunk;
        });
        return resp.on('end', function() {
          var e, obj;
          clearTimeout(timeout);
          obj = '';
          _this.emit('status', _this.name + ': ' + bit + ' chunks received.');
          if (str) {
            try {
              return res.send(JSON.parse(str)).end();
            } catch (_error) {
              e = _error;
              res.statusCode = 503;
              return res.send({
                "response": str
              }).end();
            }
          }
        });
      }).on('error', function(err) {
        clearTimeout(timeout);
        _this.emit('err', err.errno);
        res.statusCode = 504;
        return res.send({
          "success": false,
          "error": err.errno,
          "statusCode": 504
        }).end();
      }).end();
      fn = timeout_wrapper(_request);
      return timeout = setTimeout(fn, 3000);
    };

    Provider.prototype.test = function(fn) {
      var func, query, timeout, timeout_wrapper, _req, _this;
      timeout_wrapper = function(Request) {
        return function() {
          return fn({
            'success': false,
            'message': 'Page Timed out'
          });
        };
      };
      _this = this;
      query = this.buildReturn('test', '');
      _req = http.get(query, function(resp) {
        var str;
        str = '';
        resp.on('data', function(chunk) {
          return str += chunk;
        });
        return resp.on('end', function() {
          var e, obj;
          obj = {};
          try {
            obj = JSON.parse(str);
          } catch (_error) {
            e = _error;
            obj = {
              "response": str
            };
          }
          return fn(obj);
        });
      }).on('error', function(err) {
        return fn({
          "success": false,
          "status": err.code
        });
      }).end();
      func = timeout_wrapper(_req);
      return timeout = setTimeout(func, 3000);
    };

    Provider.prototype.buildReturn = function(ref, q) {
      var actionPath, term;
      this.emit('log', this.url[ref].log);
      term = encodeURIComponent(q != null ? q : '');
      actionPath = this.url[ref].str;
      return {
        host: this.host,
        port: this.port,
        path: '/api/' + this.api + '/' + actionPath + term
      };
    };

    return Provider;

  })(Base);

  module.exports = {
    generic: Provider,
    CouchPotato: CouchPotato = (function(_super) {
      __extends(CouchPotato, _super);

      function CouchPotato() {
        _ref = CouchPotato.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CouchPotato.prototype.url = {
        test: {
          str: 'app.available',
          log: CouchPotato.name + ': Checking to see if app is available'
        },
        find: {
          str: 'movie.search/?q=',
          log: CouchPotato.name + ': Find'
        },
        update: {
          str: 'movie.add/?identifier='
        },
        add: {
          str: 'movie.add/?identifier='
        }
      };

      return CouchPotato;

    })(Provider),
    SickBeard: SickBeard = (function(_super) {
      __extends(SickBeard, _super);

      function SickBeard() {
        _ref1 = SickBeard.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      SickBeard.prototype.url = {
        test: {
          str: 'app.available'
        },
        find: {
          str: 'movie.search/?q='
        },
        update: {
          str: 'movie.add/?identifier='
        },
        add: {
          str: 'movie.add/?identifier='
        }
      };

      return SickBeard;

    })(Provider)
  };

}).call(this);
